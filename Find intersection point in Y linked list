# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        
        node1, node2 = headA, headB
        n1, n2 = 0,0
        
        n1 = Solution.findLLlen(node1,n1)
        n2 = Solution.findLLlen(node2,n2)
        
        # print(f"n1, n2 = {n1}, {n2}")
        
        if n1>n2:
            long = headA
            short = headB
        else:
            long = headB
            short = headA
            
        skip = abs(n1-n2)
        
        while skip>0:
            long = long.next
            skip-=1
        
        while long and short:
            if long==short: return long
            
            if long.next: long = long.next
            else: return None
            
            if short.next: short = short.next
            else: return None
            
    def findLLlen(node,n):
        
        while node:
            node = node.next
            n+=1
        return n

        
