# Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

# Return the decimal value of the number in the linked list.



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        start = head
        Pow = 0
        result = 0
        arr = list()
        
        while True:
            if head and head.val>=0:
                arr.append(head.val)
            else:
                break
            head = head.next
        
        Len = len(arr)-1
        
        for i in range(Len, -1, -1):
            result=result + ((2**Pow)*arr[i])
            Pow+=1
        return result
        
        
        1. convert link list to array
        2. reverse the array
        3. w.r.t.power multiply and add accouringly
