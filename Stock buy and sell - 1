class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        # Correct approach but time complexity is high ~ O(n2)
        # Hence not accepted
        
#         maxdiff = 0
#         localdiff = 0
#         last = len(prices)
        
#         for i in range(0,last-1):
#             buy = prices[i]
#             sell = max(prices[i+1:])
#             localdiff = sell-buy
#             if maxdiff < localdiff:
#                 maxdiff = localdiff
        # return maxdiff
    
#       alternate approach to solve the same question.

        maxProfit = 0
        minBuyCost = prices[0]
        n = len(prices)
        localMaxProfit = 0
        
        for i in range(1,n):
            localMaxProfit = prices[i] - minBuyCost #Sell price - Buy price (Local profit)
            maxProfit = localMaxProfit if localMaxProfit > maxProfit else maxProfit
            minBuyCost = minBuyCost if minBuyCost < prices[i] else prices[i] # Minimum buy cost is it the earlier selected one or the current days cost.
        return maxProfit
