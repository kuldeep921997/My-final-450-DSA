class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        nums_set = set(nums)
        nums = list(nums_set)

        N = len(nums)
        count = 0
        global_count = 0
        
        
        # d = {}
        
        
        # for i in range(0,N):
        #     d[nums[i]] = nums[i]
        # print(d)
            
        for ele in nums:
            if (ele-1) not in nums_set:#d.keys():
                count = 1
            
                while (ele+count) in nums_set:#d.keys():
                    count+=1
                global_count = max(count, global_count)
                    
                    
        return global_count
    
    
# Here we can use the dict aproach as well but as we have already used the set
# so there is no need to use the dict as well.


# steps:
#     1.list may contain duplicates as well so use set and remove the duplicates.
#     2.save that set and update the old array with list set.
#     3.check if the (ele-1) not preset in s.
#     4.if it is not present the count++ and start a while loop INSIDE this if only.
#     5.run while till (ele+1) not present in the set and keep incrementing the counter
#     6.after while loop breaks get the max count from max(local_count, global_count)
#     7.return global_count
        
