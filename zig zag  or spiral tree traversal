# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# The below algorithm is same as the level order traversal of tree except the lefttoright variable

# if you want to use the queue method then we can use the below one.

# from collections import deque

class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        q = list()
        ans = []
        
        if not root:
            return q
        
        node = root
        q.append(root)
        lefttoright = 1
        
        while q:
            n = len(q)
            row=list()
            
            for i in range(n):
                curr_node = q.pop(0)
                if curr_node.left:q.append(curr_node.left)
                if curr_node.right:q.append(curr_node.right)
                row.append(curr_node.val)
            
            if lefttoright:
                ans.append(row)
                # ans+=row  if we require to maintain only one row
                lefttoright = 0
            else:
                ans.append(row[::-1])
                # ans+=row[::-1]  if we require to maintain only one row
                lefttoright = 1
                
        
        return ans
            
